# hooks.py
import os
import frontmatter
import jinja2

def generate_dictionary_pages(config, **kwargs):
    """
    –•—É–∫ on_pre_build: —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å raw/*.md —á–µ—Ä–µ–∑ Jinja —ñ –ø–∏—à–µ
    docs/dictionary/<slug>.md –¥–æ —Ç–æ–≥–æ, —è–∫ MkDocs –∑–±–∏—Ä–∞—Ç–∏–º–µ —Å–∞–π—Ç.
    
    –û–±—Ä–æ–±–ª—è—î –ª–∏—à–µ —Ç—ñ —Ñ–∞–π–ª–∏, —è–∫—ñ –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ –∑ –º–æ–º–µ–Ω—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó,
    –∞–±–æ –¥–ª—è —è–∫–∏—Ö —â–µ –Ω–µ —ñ—Å–Ω—É—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
    """
    docs_dir = config['docs_dir']
    project_base_dir = os.path.dirname(docs_dir)
    raw_dir = os.path.join(project_base_dir, 'sources', 'dictionary', 'raw')
    tmpl_dir = os.path.join(project_base_dir, 'sources', 'dictionary', 'page_templates')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not os.path.exists(raw_dir):
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {raw_dir} –Ω–µ —ñ—Å–Ω—É—î")
        return
    if not os.path.exists(tmpl_dir):
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {tmpl_dir} –Ω–µ —ñ—Å–Ω—É—î")
        return
    
    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(tmpl_dir),
        autoescape=False,
        trim_blocks=True,
        lstrip_blocks=True
    )
    
    print("‚ÑπÔ∏è  –ü–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Å–ª–æ–≤–Ω–∏–∫–∞...")
    for fname in sorted(os.listdir(raw_dir)):
        if not fname.endswith('.md'):
            continue
            
        slug = fname[:-3]
        source_path = os.path.join(raw_dir, fname)
        out_path = os.path.join(docs_dir, 'dictionary', f"{slug}.md")

        # --- –ó–ú–Ü–ù–ï–ù–û ---
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª —ñ —á–∏ –≤—ñ–Ω –Ω–æ–≤—ñ—à–∏–π –∑–∞ —Å–∏—Ä–∏–π —Ñ–∞–π–ª.
        # –Ø–∫—â–æ —Ç–∞–∫, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é, —â–æ–± –∑–µ–∫–æ–Ω–æ–º–∏—Ç–∏ —á–∞—Å.
        if os.path.exists(out_path):
            # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –æ–±–æ—Ö —Ñ–∞–π–ª—ñ–≤
            source_mtime = os.path.getmtime(source_path)
            dest_mtime = os.path.getmtime(out_path)
            
            # –Ø–∫—â–æ —Å–∏—Ä–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–æ–≤—ñ—à–∏–π –∑–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
            if source_mtime <= dest_mtime:
                # –í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                # print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –∑–º—ñ–Ω–µ–Ω–æ): dictionary/{slug}.md")
                continue
        # --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù ---
        
        try:
            post = frontmatter.load(source_path)
            meta = post.metadata
            part = meta.get('part_of_speech', 'andere')
            tmpl_name = f"{part}.md"
            
            if not os.path.exists(os.path.join(tmpl_dir, tmpl_name)):
                tmpl_name = "andere.md"
            
            tmpl = env.get_template(tmpl_name)
            content = tmpl.render(meta=meta)
            
            with open(out_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            print(f"üõ†Ô∏è  –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: dictionary/{slug}.md")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {fname}: {e}")
            continue
            
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Å–ª–æ–≤–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")